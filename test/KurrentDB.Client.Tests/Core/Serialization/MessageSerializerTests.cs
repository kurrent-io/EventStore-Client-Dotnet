using KurrentDB.Client.Core.Serialization;

namespace KurrentDB.Client.Tests.Core.Serialization;

using static MessageTypeNamingResolutionContext;

public class MessageSerializerTests {
	[Fact]
	public void Serialize_WithValidMessage_ReturnsEventData() {
		// Given
		var settings       = CreateTestSettings();
		var schemaRegistry = SchemaRegistry.From(settings);
		var serializer     = new MessageSerializer(schemaRegistry, settings);

		var data      = new UserRegistered("user-123", "user@random-email.com");
		var metadata  = new TestMetadata();
		var messageId = Uuid.NewUuid();
		var message   = Message.From(data, metadata, messageId);

		var context = new MessageSerializationContext(FromStreamName("user-123"));

		// When
		var eventData = serializer.Serialize(message, context);

		// Then
		Assert.Equal(messageId, eventData.MessageId);
		Assert.Equal("UserRegistered", eventData.Type);
		Assert.NotEmpty(eventData.Data.Span.ToArray());
		Assert.NotEmpty(eventData.Metadata.Span.ToArray());
		Assert.Equal(ContentType.Json.ToMessageContentType(), eventData.ContentType);
	}

	[Fact]
	public void Serialize_WithAutoGeneratedId_GeneratesNewId() {
		// Given
		var settings       = CreateTestSettings();
		var schemaRegistry = SchemaRegistry.From(settings);
		var serializer     = new MessageSerializer(schemaRegistry, settings);

		var data    = new UserRegistered("user-123", "user@random-email.com");
		var message = Message.From(data); // No ID provided

		var context = new MessageSerializationContext(FromStreamName("user-123"));

		// When
		var eventData = serializer.Serialize(message, context);

		// Then
		Assert.NotEqual(Uuid.Empty, eventData.MessageId);
	}

	[Fact]
	public void Serialize_WithoutMetadata_GeneratesEmptyMetadata() {
		// Given
		var settings       = CreateTestSettings();
		var schemaRegistry = SchemaRegistry.From(settings);
		var serializer     = new MessageSerializer(schemaRegistry, settings);

		var data    = new UserRegistered("user-123", "user@random-email.com");
		var message = Message.From(data);

		var context = new MessageSerializationContext(FromStreamName("user-123"));

		// When
		var eventData = serializer.Serialize(message, context);

		// Then
		Assert.Empty(eventData.Metadata.Span.ToArray());
	}

	[Fact]
	public void Serialize_WithBinaryContentType_UsesBinarySerializer() {
		// Given
		var settings       = CreateTestSettings().UseContentType(ContentType.Bytes);
		var schemaRegistry = SchemaRegistry.From(settings);
		var serializer     = new MessageSerializer(schemaRegistry, settings);

		var data    = new UserRegistered("user-123", "user@random-email.com");
		var message = Message.From(data);

		var context = new MessageSerializationContext(FromStreamName("user-123"));

		// When
		var eventData = serializer.Serialize(message, context);

		// Then
		Assert.Equal(ContentType.Bytes.ToMessageContentType(), eventData.ContentType);
	}

	[Fact]
	public void SerializeMultiple_WithValidMessages_ReturnsEventDataArray() {
		// Given
		var settings       = CreateTestSettings();
		var schemaRegistry = SchemaRegistry.From(settings);
		var serializer     = new MessageSerializer(schemaRegistry, settings);

		var messages = new[] {
			Message.From(new UserRegistered("1", "u1@random-email.com")),
			Message.From(new UserRegistered("2", "u2@random-email.com")),
			Message.From(new UserRegistered("3", "u3@random-email.com"))
		};

		var context = new MessageSerializationContext(FromStreamName("user-123"));

		// When
		var eventDataArray = serializer.Serialize(messages, context);

		// Then
		Assert.Equal(3, eventDataArray.Length);
		Assert.All(eventDataArray, data => Assert.Equal("UserRegistered", data.Type));
	}

	[Fact]
	public void TryDeserialize_WithValidEventRecord_DeserializesSuccessfully() {
		// Given
		var settings       = CreateTestSettings();
		var schemaRegistry = SchemaRegistry.From(settings);
		var serializer     = new MessageSerializer(schemaRegistry, settings);

		var testEvent    = new UserRegistered("user-123", "user@random-email.com");
		var testMetadata = new TestMetadata { CorrelationId = "corr-123", UserId = "user-456" };
		var messageId    = Uuid.NewUuid();

		var eventRecord = CreateTestEventRecord("UserRegistered", testEvent, testMetadata, messageId);

		// When
		var success = serializer.TryDeserialize(eventRecord, out var message);

		// Then
		Assert.True(success);
		Assert.NotNull(message);
		Assert.Equal(messageId, message.MessageId);

		var deserializedEvent = Assert.IsType<UserRegistered>(message.Data);
		Assert.Equal("user-123", deserializedEvent.UserId);
		Assert.Equal("user@random-email.com", deserializedEvent.Email);

		var deserializedMetadata = Assert.IsType<TestMetadata>(message.Metadata);
		Assert.Equal("corr-123", deserializedMetadata.CorrelationId);
		Assert.Equal("user-456", deserializedMetadata.UserId);
	}

	[Fact]
	public void TryDeserialize_WithUnknownEventType_ReturnsFalse() {
		// Given
		var settings       = CreateTestSettings();
		var schemaRegistry = SchemaRegistry.From(settings);
		var serializer     = new MessageSerializer(schemaRegistry, settings);

		var testEvent   = new UserRegistered("user-123", "user@random-email.com");
		var eventRecord = CreateTestEventRecord("UnknownEventType", testEvent);

		// When
		var success = serializer.TryDeserialize(eventRecord, out var message);

		// Then
		Assert.False(success);
		Assert.Null(message);
	}

	[Fact]
	public void TryDeserialize_WithNullData_ReturnsFalse() {
		// Given
		var settings       = CreateTestSettings();
		var schemaRegistry = SchemaRegistry.From(settings);
		var serializer     = new MessageSerializer(schemaRegistry, settings);
		var eventRecord    = CreateTestEventRecord("UserRegistered", null);

		// When
		var success = serializer.TryDeserialize(eventRecord, out var message);

		// Then
		Assert.False(success);
		Assert.Null(message);
	}

	[Fact]
	public void TryDeserialize_WithEmptyMetadata_DeserializesWithNullMetadata() {
		// Given
		var settings       = CreateTestSettings();
		var schemaRegistry = SchemaRegistry.From(settings);
		var serializer     = new MessageSerializer(schemaRegistry, settings);

		var testEvent = new UserRegistered("user-123", "user@random-email.com");
		var messageId = Uuid.NewUuid();

		var eventRecord = CreateTestEventRecord("UserRegistered", testEvent, null, messageId);

		// When
		var success = serializer.TryDeserialize(eventRecord, out var message);

		// Then
		Assert.True(success);
		Assert.NotNull(message);
		Assert.Equal(messageId, message.MessageId);
		Assert.Null(message.Metadata);

		var deserializedEvent = Assert.IsType<UserRegistered>(message.Data);
		Assert.Equal("user-123", deserializedEvent.UserId);
		Assert.Equal("user@random-email.com", deserializedEvent.Email);
	}

	[Fact]
	public void MessageSerializer_From_CreatesInstanceWithDefaultSettings() {
		// When
		var serializer = MessageSerializer.From();

		// Then - if this doesn't throw, it worked
		Assert.NotNull(serializer);
	}

	[Fact]
	public void MessageSerializer_From_CreatesInstanceWithProvidedSettings() {
		// Given
		var settings = CreateTestSettings();

		// When
		var serializer = MessageSerializer.From(settings);

		// Then - test it works with our settings
		var data    = new UserRegistered("user-123", "user@random-email.com");
		var message = Message.From(data);

		var context = new MessageSerializationContext(FromStreamName("user-123"));

		var eventData = serializer.Serialize(message, context);
		Assert.Equal("UserRegistered", eventData.Type);
	}
	
	[Fact]
	public void With_NullOperationSettings_ReturnsDefaultMessageSerializer() {
		// Given
		var defaultSettings   = new KurrentDBClientSerializationSettings();
		var messageSerializer = new MessageSerializer(SchemaRegistry.From(defaultSettings), defaultSettings);

		// When
		var result = messageSerializer.With(null);

		// Then
		Assert.Same(messageSerializer, result);
	}

	[Fact]
	public void With_DisabledAutomaticDeserialization_ReturnsNullSerializer() {
		// Given
		var defaultSettings   = new KurrentDBClientSerializationSettings();
		var messageSerializer = new MessageSerializer(SchemaRegistry.From(defaultSettings), defaultSettings);
		var operationSettings = OperationSerializationSettings.Disabled;

		// When
		var result = messageSerializer.With(operationSettings);

		// Then
		Assert.Same(NullMessageSerializer.Instance, result);
	}

	[Fact]
	public void With_NoConfigureSettings_ReturnsDefaultMessageSerializer() {
		// Given
		var defaultSettings   = new KurrentDBClientSerializationSettings();
		var messageSerializer = new MessageSerializer(SchemaRegistry.From(defaultSettings), defaultSettings);
		var operationSettings = new OperationSerializationSettings(); // Default-enabled with no config

		// When
		var result = messageSerializer.With(operationSettings);

		// Then
		Assert.Same(messageSerializer, result);
	}

	[Fact]
	public void With_ConfigureSettings_CreatesNewMessageSerializer() {
		// Given
		var defaultSettings   = KurrentDBClientSerializationSettings.Get();
		var messageSerializer = new MessageSerializer(SchemaRegistry.From(defaultSettings), defaultSettings);

		var operationSettings = OperationSerializationSettings.Configure(
			s =>
				s.RegisterMessageType<UserRegistered>("CustomMessageName")
		);

		// When
		var result = messageSerializer.With(operationSettings);

		// Then
		Assert.NotSame(messageSerializer, result);
		Assert.IsType<MessageSerializer>(result);
	}

	[Fact]
	public void Serialize_WithMultipleMessages_ReturnsArrayOfMessageData() {
		// Given
		var defaultSettings   = KurrentDBClientSerializationSettings.Get();
		var messageSerializer = new MessageSerializer(SchemaRegistry.From(defaultSettings), defaultSettings);
		var messages = new List<Message> {
			Message.From(new UserRegistered("Joe Doe", "joe.doe@unknown.com")),
			Message.From(new UserRegistered("Anne Smith", "anne.smith@unknown.com")),
			Message.From(new UserRegistered("Ouro the Dragon", "ouro.dragon@unknown.com"))
		};

		var context = new MessageSerializationContext(FromStreamName("test-stream"));

		// When
		var result = messageSerializer.Serialize(messages, context);

		// Then
		Assert.Equal(3, result.Length);
	}

	static KurrentDBClientSerializationSettings CreateTestSettings() {
		var settings = new KurrentDBClientSerializationSettings();
		settings.RegisterMessageType<UserRegistered>("UserRegistered");
		settings.RegisterMessageType<UserAssignedToRole>("UserAssignedToRole");
		settings.UseMetadataType<TestMetadata>();

		return settings;
	}

	static EventRecord CreateTestEventRecord(
		string eventType, object? data = null, object? metadata = null, Uuid? messageId = null
	) =>
		new(
			Uuid.NewUuid().ToString(),
			messageId ?? Uuid.NewUuid(),
			StreamPosition.FromInt64(0),
			new Position(1, 1),
			new Dictionary<string, string> {
				{ Constants.Metadata.Type, eventType },
				{ Constants.Metadata.Created, DateTime.UtcNow.ToTicksSinceEpoch().ToString() },
				{ Constants.Metadata.ContentType, Constants.Metadata.ContentTypes.ApplicationJson }
			},
			data != null ? _serializer.Serialize(data) : ReadOnlyMemory<byte>.Empty,
			metadata != null ? _metadataSerializer.Serialize(metadata) : ReadOnlyMemory<byte>.Empty
		);

	static readonly SystemTextJsonSerializer _serializer = new SystemTextJsonSerializer();

	static readonly SystemTextJsonSerializer _metadataSerializer = new SystemTextJsonSerializer(
		new SystemTextJsonSerializationSettings { Options = KurrentDBClient.StreamMetadataJsonSerializerOptions }
	);

	public record UserRegistered(string UserId, string Email);

	public record UserAssignedToRole(string UserId, string Role);

	public class TestMetadata {
		public string CorrelationId { get; set; } = "correlation-id";
		public string UserId        { get; set; } = "user-id";
	}
}
